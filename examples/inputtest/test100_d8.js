/* Loads the WebAssembly from file if running on browser */
/*
async function createWebAssembly(path, importObject) {
	const bytes = await window.fetch(path).then(x => x.arrayBuffer());
	return WebAssembly.instantiate(bytes, importObject);
}
*/

/* Configures the memory available for Web Aseembly */
const memory = new WebAssembly.Memory({initial:256, maximum:256});
const env = {
	'abortStackOverflow': _ => {throw new Error('overflow');},
	'table': new WebAssembly.Table({initial: 0, maximum: 0, element: 'anyfunc'}),          
	'tableBase': 0,  
	'memory': memory,
	'memoryBase': 1024,
	'STACKTOP': 0, 
	'STACK_MAX': memory.buffer.byteLength,
};
const importObject = {env};

const bytes = new Uint8Array(
	[0,97,115,109,1,0,0,0,1,185,130,128,128,0,3,96,100,127,127,127,
		127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,
		127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,
		127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,
		127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,
		127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,1,127,96,
		100,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,
		125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,
		125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,
		125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,
		125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,
		125,1,127,96,100,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,
		124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,
		124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,
		124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,
		124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,
		124,124,124,124,124,1,127,3,132,128,128,128,0,3,0,1,2,4,132,128,
		128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,
		128,0,0,7,173,128,128,128,0,4,6,109,101,109,111,114,121,2,0,7,
		109,97,105,110,105,110,116,0,0,9,109,97,105,110,102,108,111,97,116,0,
		1,10,109,97,105,110,100,111,117,98,108,101,0,2,10,156,128,128,128,0,
		3,132,128,128,128,0,0,65,0,11,132,128,128,128,0,0,65,0,11,132,
		128,128,128,0,0,65,0,11]
);

// console.log(bytes);

/* Load in our wasm file and try to activate functions */
WebAssembly.instantiate(bytes, importObject).then(wa => {
	const exports = wa.instance.exports;
	for (var i = 0; i < 1000000; i++){	
		//exports.mainint(476, 7, 986, 966, 229, 266, 684, 884, 765, 511, 908, 905, 321, 511, 369, 888, 229, 726, 621, 836, 337, 813, 24, 892, 617, 732, 42, 766, 648, 367, 516, 278, 828, 632, 325, 155, 566, 691, 698, 350, 420, 135, 195, 970, 966, 464, 361, 447, 639, 752, 792, 98, 664, 748, 477, 16, 132, 363, 360, 823, 286, 308, 873, 320, 273, 17, 346, 180, 36, 849, 160, 991, 25, 487, 339, 289, 757, 813, 851, 509, 239, 757, 617, 470, 561, 988, 41, 269, 387, 469, 825, 821, 122, 396, 754, 243, 26, 165, 921, 486, 537, 242, 198, 365, 139, 304, 497, 72, 22, 583, 966, 442, 737, 55, 146, 931, 61, 627, 243, 13, 921, 949, 371, 31, 513, 287, 835, 912, 405, 67, 977, 320, 857, 755, 717, 830, 641, 807, 209, 663, 213, 339, 129, 611, 316, 904, 576, 741, 761, 889, 166, 557, 492, 744, 918, 693, 714, 831, 681, 164, 768, 103, 527, 316, 400, 238, 306, 709, 999, 487, 23, 396, 711, 35, 155, 432, 230, 833, 966, 845, 994, 222, 262, 938, 393, 580, 812, 317, 888, 226, 426, 564, 269, 676, 671, 664, 608, 57, 301, 121, 944);
		//exports.mainfloat(570, 485, 38, 324, 584, 450, 851, 651, 203, 358, 493, 293, 639, 911, 21, 953, 907, 838, 668, 945, 314, 524, 653, 718, 92, 299, 162, 437, 395, 249, 878, 524, 914, 873, 323, 645, 703, 44, 165, 713, 390, 410, 670, 504, 903, 661, 222, 173, 383, 871, 452, 82, 44, 655, 608, 674, 417, 175, 265, 149, 272, 524, 542, 863, 37, 609, 811, 860, 268, 841, 356, 436, 946, 885, 801, 229, 272, 64, 203, 395, 272, 402, 459, 848, 79, 858, 66, 899, 943, 235, 320, 715, 59, 475, 594, 14, 121, 961, 103, 298, 646, 559, 383, 678, 552, 921, 253, 182, 77, 921, 456, 87, 699, 77, 597, 397, 466, 523, 138, 552, 200, 647, 547, 34, 105, 196, 755, 499, 157, 635, 578, 485, 263, 811, 247, 639, 944, 216, 417, 354, 421, 155, 444, 854, 168, 952, 40, 123, 426, 726, 488, 401, 197, 594, 907, 654, 300, 565, 102, 598, 241, 877, 88, 641, 599, 903, 767, 981, 978, 850, 18, 88, 105, 448, 69, 932, 958, 572, 927, 723, 566, 47, 219, 892, 58, 624, 990, 929, 898, 668, 56, 912, 122, 70, 550, 979, 573, 485, 743, 887, 990);
		exports.maindouble(484, 107, 545, 233, 180, 383, 885, 590, 253, 750, 797, 968, 917, 950, 440, 901, 290, 170, 221, 756, 238, 439, 592, 523, 166, 797, 686, 252, 530, 307, 396, 482, 930, 893, 160, 555, 892, 359, 480, 522, 721, 465, 556, 962, 374, 61, 874, 337, 826, 136, 94, 873, 208, 182, 670, 614, 178, 668, 520, 614, 368, 491, 795, 187, 779, 46, 626, 495, 23, 28, 364, 607, 554, 996, 95, 855, 146, 47, 580, 667, 102, 533, 932, 918, 78, 312, 422, 704, 641, 514, 577, 705, 397, 911, 798, 81, 913, 424, 688, 294, 312, 667, 287, 22, 739, 3, 753, 445, 177, 268, 467, 183, 130, 282, 280, 298, 54, 834, 536, 859, 303, 18, 40, 491, 156, 653, 832, 855, 170, 531, 62, 817, 167, 392, 779, 227, 380, 488, 775, 92, 508, 372, 688, 316, 676, 212, 712, 906, 106, 9, 38, 325, 973, 139, 515, 366, 339, 621, 575, 783, 279, 126, 34, 603, 997, 468, 77, 959, 286, 547, 172, 653, 969, 143, 306, 378, 717, 86, 684, 798, 298, 547, 767, 361, 336, 271, 675, 84, 19, 563, 136, 701, 427, 92, 618, 98, 762, 582, 53, 523, 752);
	}
}).catch(err => console.log('Error loading WASM', err));

