/* Loads the WebAssembly from file if running on browser */
/*
async function createWebAssembly(path, importObject) {
	const bytes = await window.fetch(path).then(x => x.arrayBuffer());
	return WebAssembly.instantiate(bytes, importObject);
}
*/

/* Configures the memory available for Web Aseembly */
const memory = new WebAssembly.Memory({initial:256, maximum:256});
const env = {
	'abortStackOverflow': _ => {throw new Error('overflow');},
	'table': new WebAssembly.Table({initial: 0, maximum: 0, element: 'anyfunc'}),          
	'tableBase': 0,  
	'memory': memory,
	'memoryBase': 1024,
	'STACKTOP': 0, 
	'STACK_MAX': memory.buffer.byteLength,
};
const importObject = {env};

console.log("This is not good");

const bytes = new Uint8Array(
	[0,97,115,109,1,0,0,0,1,188,130,128,128,0,3,96,101,127,127,127,
		127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,
		127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,
		127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,
		127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,
		127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,1,127,
		96,101,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,
		125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,
		125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,
		125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,
		125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,
		125,125,125,1,127,96,101,124,124,124,124,124,124,124,124,124,124,124,124,124,
		124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,
		124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,
		124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,
		124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,
		124,124,124,124,124,124,124,124,1,127,3,132,128,128,128,0,3,0,1,2,
		4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,
		129,128,128,128,0,0,7,173,128,128,128,0,4,6,109,101,109,111,114,121,
		2,0,7,109,97,105,110,105,110,116,0,0,9,109,97,105,110,102,108,111,
		97,116,0,1,10,109,97,105,110,100,111,117,98,108,101,0,2,10,156,128,
		128,128,0,3,132,128,128,128,0,0,65,0,11,132,128,128,128,0,0,65,
		0,11,132,128,128,128,0,0,65,0,11]
);

// console.log(bytes);

/* Load in our wasm file and try to activate functions */
WebAssembly.instantiate(bytes, importObject).then(wa => {
	const exports = wa.instance.exports;	
	console.log(exports.mainint(861, 346, 999, 753, 759, 734, 752, 389, 440, 716, 271, 647, 923, 964, 404, 824, 410, 77, 436, 542, 429, 425, 651, 446, 566, 430, 259, 728, 707, 512, 176, 483, 509, 718, 763, 80, 745, 369, 937, 583, 432, 716, 857, 19, 329, 700, 990, 493, 719, 871, 742, 369, 587, 637, 795, 600, 363, 431, 915, 282, 752, 978, 576, 984, 32, 9, 446, 479, 166, 393, 489, 345, 163, 50, 205, 195, 864, 373, 461, 389, 54, 528, 297, 916, 888, 467, 771, 327, 689, 306, 468, 409, 74, 458, 322, 160, 668, 954, 324, 525, 446, 48, 622, 201, 837, 193, 325, 308, 606, 776, 642, 90, 43, 985, 87, 901, 365, 707, 673, 87, 387, 688, 27, 699, 759, 106, 896, 768, 806, 934, 325, 377, 956, 113, 414, 502, 751, 319, 935, 435, 9, 170, 429, 910, 437, 367, 248, 82, 35, 65, 359, 335, 438, 978, 685, 762, 524, 211, 127, 575, 423, 523, 625, 536, 96, 955, 367, 913, 683, 335, 449, 575, 371, 671, 281, 862, 648, 883, 562, 550, 635, 417, 761, 848, 408, 275, 398, 850, 307, 36, 462, 939, 339, 831, 668, 927, 14, 646, 228, 696, 541, 583));
	console.log(exports.mainfloat(633, 625, 629, 733, 327, 553, 934, 810, 544, 540, 473, 450, 487, 760, 475, 790, 23, 872, 432, 489, 63, 100, 242, 586, 298, 400, 564, 957, 402, 853, 906, 897, 501, 340, 957, 154, 896, 119, 450, 133, 342, 322, 781, 225, 448, 767, 109, 572, 227, 100, 273, 441, 307, 292, 595, 590, 399, 372, 27, 181, 674, 631, 834, 197, 815, 249, 5, 715, 519, 916, 167, 31, 137, 831, 526, 228, 439, 862, 908, 149, 244, 623, 646, 387, 335, 995, 811, 822, 811, 479, 131, 313, 467, 934, 451, 135, 443, 391, 790, 215, 846, 250, 601, 798, 211, 168, 40, 236, 285, 149, 79, 952, 878, 894, 663, 238, 526, 678, 452, 378, 788, 705, 754, 769, 118, 695, 935, 105, 732, 597, 827, 127, 676, 32, 55, 668, 247, 550, 290, 930, 335, 674, 112, 767, 678, 836, 130, 426, 967, 255, 554, 176, 132, 11, 819, 672, 249, 571, 214, 728, 496, 675, 158, 39, 53, 41, 669, 328, 836, 74, 427, 838, 729, 827, 597, 823, 416, 502, 914, 60, 679, 311, 462, 812, 202, 586, 165, 937, 756, 213, 640, 184, 433, 255, 49, 547, 461, 182, 667, 686, 898, 430));
	console.log(exports.maindouble(532, 828, 66, 142, 12, 139, 394, 602, 611, 181, 162, 982, 133, 222, 680, 431, 895, 796, 964, 465, 628, 785, 641, 555, 368, 399, 107, 87, 54, 182, 556, 102, 38, 519, 400, 242, 142, 452, 315, 1000, 583, 855, 841, 726, 811, 369, 673, 161, 369, 17, 363, 237, 398, 64, 16, 542, 911, 734, 588, 572, 866, 686, 183, 199, 115, 417, 737, 956, 972, 164, 92, 461, 965, 153, 347, 575, 140, 247, 832, 684, 413, 919, 639, 858, 997, 947, 487, 373, 371, 48, 438, 368, 400, 873, 858, 718, 23, 126, 998, 504, 416, 263, 252, 913, 949, 510, 160, 770, 27, 97, 291, 654, 790, 502, 91, 76, 554, 782, 331, 959, 63, 906, 875, 288, 892, 175, 588, 784, 888, 871, 482, 498, 435, 157, 434, 772, 255, 658, 848, 694, 601, 258, 342, 473, 26, 221, 311, 139, 68, 939, 128, 142, 855, 787, 104, 205, 995, 743, 475, 570, 592, 149, 265, 283, 24, 111, 261, 513, 619, 210, 509, 705, 453, 452, 625, 631, 338, 910, 858, 744, 842, 40, 589, 800, 7, 389, 554, 251, 62, 457, 779, 988, 925, 715, 744, 261, 294, 724, 836, 347, 295, 601));	
}).catch(err => console.log('Error loading WASM', err));
console.log("Reached end of file");
